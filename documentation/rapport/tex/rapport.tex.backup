\documentclass[a4paper,11pt]{article}
\usepackage{configuration}


\begin{document}
\input{page-de-garde}
\tableofcontents % table des matières
%\pagebreak
\listoffigures % liste des figures
%\pagebreak
\lstlistoflistings
\pagebreak
%\listoftables % liste des tables
%\pagebreak





\section{Evenements}

\begin{figure}[h!t]
  \centering
    \includegraphics[scale=0.60]{Evenements}
  \caption{Evènements}
  \label{fig:evenements}
\end{figure}




\subsection{Hotes}


\subsubsection{Envoi d'un message original}
L'envoi d'un message original par un hôte est illustré par la figure \refp{fig:hote-envoie-message-original}. 

\begin{figure}[h!t]
  \centering
    \includegraphics[scale=0.60]{HoteEnvoieMessageOriginal}
  \caption{Envoi d'un message original par un hôte}
  \label{fig:hote-envoie-message-original}
\end{figure}

Comme le diagramme le montre, nous avons choisi de ne générer qu'un évènement d'envoi à la fois. Nous générons et plaçons le premier évènement sur la FEL. Quand celui-ci devient l'évènement imminent, l'hôte crée et envoie son message et génère l'évènement suivant puis le place sur la FEL.


\clearpage
\subsubsection*{Génération des temps d'envoi}
Une variable aléatoire nous permet de générer pour chaque hôte le temps du prochain envoi (entre le temps actuel de simulation + 1 et le temps actuel de simulation + le temps inter-envois). Pour ce faire, chaque hôte dispose de sa propre instance:

\begin{lstlisting}[caption=Génération des temps d'envoi]
private final Random generateurTempsEnvoi = new Random();

...

/**
 * Generer le prochain temps d'envoi.
 *
 * @return le prochain temps d'envoi.
*/
private long genererTempsProchainEnvoi() {
	int tempsAvantProchainEnvoi =
			generateurTempsEnvoi.nextInt(getConfiguration()
					.getConfigurationHotes().getTempsMaxInterEnvois()) + 1;
	// on fait +1 et donc par exemple 0-5 devient 1-6
	return getSimulation().getHorloge() + tempsAvantProchainEnvoi;
}
\end{lstlisting}





\subsubsection*{Choix du destinataire}
Un paramètre de simulation permet de spécifier le pourcentage de messages qui doivent être à destination d'un hôte connecté à un autre agent. Pour implémenter ceci, nous avons utilisé deux autres variables aléatoires. Chaque hôte dispose d'une variable aléatoire qu'on utilise avec des random digits de la manière suivante:

\begin{lstlisting}[caption=Choix du type de destinataire d'un message]
private final Random generateurTypeDestination = new Random();

...

int randomDigitsAutreAgent =
	(int) (getConfiguration().getConfigurationHotes()
	.getTauxMessagesVersAutreAgent() * 100);
int random = generateurTypeDestination.nextInt(100) + 1;
boolean messagePourHoteAutreAgent = false;

if (random <= randomDigitsAutreAgent) {
	messagePourHoteAutreAgent = true;
}
\end{lstlisting}










\clearpage

D'un autre côté, des méthodes se servant de variables aléatoires permettent de choisir un agent ou un hôte aléatoirement. De cette façon, un hôte peut déterminer de manière aléatoire qui devra reçevoir son message:

\begin{lstlisting}[caption=Hote - Choix de la destination]
if (messagePourHoteAutreAgent) {
	hoteDestination = getSimulation().getAgentAleatoire(this.getAgent()).getHoteAleatoire();
}
else {
	hoteDestination = this.getAgent().getHoteAleatoire(this);
}
\end{lstlisting}




\clearpage

Dans le premier cas, si le message doit être à destination d'un hôte connecté à un autre agent, l'hôte demande un agent aléatoire avec comme exception son propre agent (puisque ça doit être n'importe quel agent autre que le sien). Dans le second, l'hôte demande simplement à son agent de choisir un de ses hôtes aléatoirement (à l'exception de l'hôte actuel). Par exemple, voici la méthode permettant d'obtenir un agent aléatoire:

\begin{lstlisting}[caption=Utilisation des variables aléatoires pour sélectionner un agent]
/**
 * PRNG utilise pour choisir un agent au hasard.
*/
private final Random		generateurChoixAgent	= new Random();
	
...

/**
 * Recuperer un agent aleatoire pouvant etre n'importe lequel sauf celui
 * fourni en argument.
 * 
 * @param exception
 *        le seul agent ne pouvant pas etre retourne
 * @return un agent aleatoire autre que celui donne en argument
*/
public Agent getAgentAleatoire(final Agent exception) {
	Agent retVal = null;
	do {
		switch (generateurChoixAgent.nextInt(7) + 1) {
			case 1:
				retVal = agent1;
				break;
			case 2:
				retVal = agent2;
				break;
			case 3:
				retVal = agent3;
				break;
			case 4:
				retVal = agent4;
				break;
			case 5:
				retVal = agent5;
				break;
			case 6:
				retVal = agent6;
				break;
			case 7:
				retVal = agent7;
				break;
			default:
				LOGGER
						.error("Un probleme a eu lieu pendant la selection aleatoire d'un agent.");
		}
	} while (retVal == null || exception.equals(retVal));
	
	return retVal;
}
\end{lstlisting}

\clearpage











\subsubsection{Réception d'un message}
La réception d'un message par un hôte est illustrée par la figure \refp{fig:hote-recoit-message}.

\begin{figure}[h!t]
  \centering
    \includegraphics[scale=0.60]{HoteRecoitMessage}
  \caption{Réception d'un message par un hôte}
  \label{fig:hote-recoit-message}
\end{figure}








\subsubsection{Fin de traitement d'un message}
Le diagramme UML correspondant étant trop grand, nous ne l'avons pas inclus dans le rapport. Il est disponible dans le dossier \textbf{UML} qui accompagne le rapport (le fichier: \textbf{Evenement - HoteFinTraitementMessage.png}).




\subsubsection{Timeout}
Les actions prises lors d'un timeout sont illustrées par la figure \refp{fig:hote-timeout}.

\begin{figure}[h!t]
  \centering
    \includegraphics[scale=0.60]{HoteTimeoutReceptionAccuse}
  \caption{Timeout de réception d'un accusé}
  \label{fig:hote-timeout}
\end{figure}











\subsection{Agents}


\subsubsection{Réception d'un message}\label{evt-agent-reception-message}
Le diagramme UML correspondant étant trop grand, nous ne l'avons pas inclus dans le rapport. Il est disponible dans le dossier \textbf{UML} qui accompagne le rapport (le fichier: \textbf{Evenement - AgentRecoitMessage.png}).

Dans le diagramme UML, il y a deux points que nous n'avons pas expliqués (en jaune):

\begin{itemize}
 \item Le premier point: \og Est-ce qu'on peut envoyer les nouvelles informations de routage maintenant? \fg. Nous avons décidé d'éviter trop d'envois successifs inutiles d'informations de routage, afin de ne pas surcharger le système. Pour ce faire, quand un agent doit envoyer les informations de routage (à cause du niveau d'occupation du buffer), il vérifie si ça fait au moins $x$ temps de simulation qu'il a envoyé un message de ce type. Si oui, alors il peut envoyer le message. De cette manière, si pour un temps $t$ donné, l'agent reçoit $50$ messages, que pour le premier il dépasse le seuil d'alerte d'occupation du buffer et envoie ses informations de routage, puisqu'il sera toujours au delà du seuil d'alerte pour les $49$ autres messages, il ne renverra plus de message avant un certain délai.
 
 \item Le second point: \og Augmentation du coût de nos routes à destination des autres agents (on augmente d'une valeur fixe à chaque fois) \fg. Nous faisons ceci avec que le distance vector prenne en compte le niveau d'occupation des agents. Quand un agent donné est surchargé, il augmente le coût de ses routes à destination des autres agents et prévient ses voisins. De cette manière quand les voisins reçoivent les informations, ils mettent à jour leur propre table de routage et choisissent peut être d'autres routes (i.e., changent leur DV) pour faire suivre les messages. Si les autres agents deviennent surchargés, leurs coûts augmenteront également. Ainsi au final, le DV prend en compte l'occupation des buffers des agents, ce qui permet de mieux répartir la charge sur les différents agents. Dans les résultats des simulations, nous avons en effet constaté que les buffers sont utilisés de manière plus homogène.
\end{itemize}






\end{document}
